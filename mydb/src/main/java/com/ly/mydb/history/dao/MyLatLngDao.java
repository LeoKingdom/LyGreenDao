package com.ly.mydb.history.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.ly.mydb.history.bean.MyLatLng;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MY_LAT_LNG".
*/
public class MyLatLngDao extends AbstractDao<MyLatLng, Void> {

    public static final String TABLENAME = "MY_LAT_LNG";

    /**
     * Properties of entity MyLatLng.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DeviceId = new Property(0, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Lat = new Property(1, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(2, double.class, "lng", false, "LNG");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
    }


    public MyLatLngDao(DaoConfig config) {
        super(config);
    }
    
    public MyLatLngDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_LAT_LNG\" (" + //
                "\"DEVICE_ID\" TEXT," + // 0: deviceId
                "\"LAT\" REAL NOT NULL ," + // 1: lat
                "\"LNG\" REAL NOT NULL ," + // 2: lng
                "\"ADDRESS\" TEXT);"); // 3: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_LAT_LNG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyLatLng entity) {
        stmt.clearBindings();
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(1, deviceId);
        }
        stmt.bindDouble(2, entity.getLat());
        stmt.bindDouble(3, entity.getLng());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyLatLng entity) {
        stmt.clearBindings();
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(1, deviceId);
        }
        stmt.bindDouble(2, entity.getLat());
        stmt.bindDouble(3, entity.getLng());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MyLatLng readEntity(Cursor cursor, int offset) {
        MyLatLng entity = new MyLatLng( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // deviceId
            cursor.getDouble(offset + 1), // lat
            cursor.getDouble(offset + 2), // lng
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // address
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyLatLng entity, int offset) {
        entity.setDeviceId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLat(cursor.getDouble(offset + 1));
        entity.setLng(cursor.getDouble(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MyLatLng entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MyLatLng entity) {
        return null;
    }

    @Override
    public boolean hasKey(MyLatLng entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
